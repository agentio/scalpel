// Copyright 2021-2025 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-scalpel-go. DO NOT EDIT.
//
// Source: defaultpackage.proto

package genconnect

import (
	context "context"
	errors "errors"
	scalpel "github.com/agentio/scalpel"
	gen "github.com/agentio/scalpel/cmd/protoc-gen-scalpel-go/internal/testdata/defaultpackage/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = scalpel.IsAtLeastVersion1_13_0

const (
	// TestServiceName is the fully-qualified name of the TestService service.
	TestServiceName = "connect.test.default_package.TestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceMethodProcedure is the fully-qualified name of the TestService's Method RPC.
	TestServiceMethodProcedure = "/connect.test.default_package.TestService/Method"
)

// TestServiceClient is a client for the connect.test.default_package.TestService service.
type TestServiceClient interface {
	Method(context.Context, *scalpel.Request[gen.Request]) (*scalpel.Response[gen.Response], error)
}

// NewTestServiceClient constructs a client for the connect.test.default_package.TestService
// service. By default, it uses the gRPCConnect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceClient(httpClient scalpel.HTTPClient, baseURL string, opts ...scalpel.ClientOption) TestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	testServiceMethods := gen.File_defaultpackage_proto.Services().ByName("TestService").Methods()
	return &testServiceClient{
		method: scalpel.NewClient[gen.Request, gen.Response](
			httpClient,
			baseURL+TestServiceMethodProcedure,
			scalpel.WithSchema(testServiceMethods.ByName("Method")),
			scalpel.WithClientOptions(opts...),
		),
	}
}

// testServiceClient implements TestServiceClient.
type testServiceClient struct {
	method *scalpel.Client[gen.Request, gen.Response]
}

// Method calls connect.test.default_package.TestService.Method.
func (c *testServiceClient) Method(ctx context.Context, req *scalpel.Request[gen.Request]) (*scalpel.Response[gen.Response], error) {
	return c.method.CallUnary(ctx, req)
}

// TestServiceHandler is an implementation of the connect.test.default_package.TestService service.
type TestServiceHandler interface {
	Method(context.Context, *scalpel.Request[gen.Request]) (*scalpel.Response[gen.Response], error)
}

// NewTestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the gRPC protocol with the binary Protobuf codecs.
func NewTestServiceHandler(svc TestServiceHandler, opts ...scalpel.HandlerOption) (string, http.Handler) {
	testServiceMethods := gen.File_defaultpackage_proto.Services().ByName("TestService").Methods()
	testServiceMethodHandler := scalpel.NewUnaryHandler(
		TestServiceMethodProcedure,
		svc.Method,
		scalpel.WithSchema(testServiceMethods.ByName("Method")),
		scalpel.WithHandlerOptions(opts...),
	)
	return "/connect.test.default_package.TestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceMethodProcedure:
			testServiceMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceHandler struct{}

func (UnimplementedTestServiceHandler) Method(context.Context, *scalpel.Request[gen.Request]) (*scalpel.Response[gen.Response], error) {
	return nil, scalpel.NewError(scalpel.CodeUnimplemented, errors.New("connect.test.default_package.TestService.Method is not implemented"))
}
